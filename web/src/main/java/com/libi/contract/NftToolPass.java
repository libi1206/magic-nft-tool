package com.libi.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class NftToolPass extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b5060405162004ab738038062004ab7833981810160405281019062000037919062000488565b6040518060400160405280600d81526020017f4e465420546f6f6c2050617373000000000000000000000000000000000000008152506040518060400160405280600381526020017f4e545000000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bb9291906200029d565b508060019080519060200190620000d49291906200029d565b505050620000f7620000eb620001cf60201b60201c565b620001d760201b60201c565b83600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff81111562000156576200015562000687565b5b604051908082528060200260200182016040528015620001855781602001602082028036833780820191505090505b50600b90805190602001906200019d9291906200032e565b5081600c8190555080600d8190555082600e9080519060200190620001c49291906200029d565b50505050506200070f565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620002ab90620005ec565b90600052602060002090601f016020900481019282620002cf57600085556200031b565b82601f10620002ea57805160ff19168380011785556200031b565b828001600101855582156200031b579182015b828111156200031a578251825591602001919060010190620002fd565b5b5090506200032a9190620003bd565b5090565b828054828255906000526020600020908101928215620003aa579160200282015b82811115620003a95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906200034f565b5b509050620003b99190620003bd565b5090565b5b80821115620003d8576000816000905550600101620003be565b5090565b6000620003f3620003ed8462000542565b62000519565b905082815260208101848484011115620004125762000411620006bb565b5b6200041f848285620005b6565b509392505050565b6000815190506200043881620006db565b92915050565b600082601f830112620004565762000455620006b6565b5b815162000468848260208601620003dc565b91505092915050565b6000815190506200048281620006f5565b92915050565b60008060008060808587031215620004a557620004a4620006c5565b5b6000620004b58782880162000427565b945050602085015167ffffffffffffffff811115620004d957620004d8620006c0565b5b620004e7878288016200043e565b9350506040620004fa8782880162000471565b92505060606200050d8782880162000471565b91505092959194509250565b60006200052562000538565b905062000533828262000622565b919050565b6000604051905090565b600067ffffffffffffffff82111562000560576200055f62000687565b5b6200056b82620006ca565b9050602081019050919050565b600062000585826200058c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620005d6578082015181840152602081019050620005b9565b83811115620005e6576000848401525b50505050565b600060028204905060018216806200060557607f821691505b602082108114156200061c576200061b62000658565b5b50919050565b6200062d82620006ca565b810181811067ffffffffffffffff821117156200064f576200064e62000687565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b620006e68162000578565b8114620006f257600080fd5b50565b6200070081620005ac565b81146200070c57600080fd5b50565b614398806200071f6000396000f3fe6080604052600436106101cd5760003560e01c806370a08231116100f7578063b88d4fde11610095578063e985e9c511610064578063e985e9c514610668578063f2fde38b146106a5578063f7c3a9f1146106ce578063fd8b2370146106f7576101cd565b8063b88d4fde146105b0578063bf8157ad146105d9578063c7c3268b14610602578063c87b56dd1461062b576101cd565b806390aa0b0f116100d157806390aa0b0f1461050557806395d89b4114610533578063a22cb4651461055e578063aff4d20014610587576101cd565b806370a0823114610486578063715018a6146104c35780638da5cb5b146104da576101cd565b806323b872dd1161016f57806342966c681161013e57806342966c68146103a45780634cdac599146103e15780635bcabf041461041e5780636352211e14610449576101cd565b806323b872dd146102fe5780632cc5cee7146103275780633f5e47411461035057806342842e0e1461037b576101cd565b8063095ea7b3116101ab578063095ea7b3146102775780630ccf2346146102a05780631249c58b146102c957806314bf8846146102d3576101cd565b806301ffc9a7146101d257806306fdde031461020f578063081812fc1461023a575b600080fd5b3480156101de57600080fd5b506101f960048036038101906101f49190612f25565b610720565b604051610206919061351d565b60405180910390f35b34801561021b57600080fd5b50610224610732565b6040516102319190613538565b60405180910390f35b34801561024657600080fd5b50610261600480360381019061025c9190612fc8565b6107c4565b60405161026e91906134b6565b60405180910390f35b34801561028357600080fd5b5061029e60048036038101906102999190612ee5565b61080a565b005b3480156102ac57600080fd5b506102c760048036038101906102c29190612fc8565b610922565b005b6102d1610934565b005b3480156102df57600080fd5b506102e8610b64565b6040516102f5919061351d565b60405180910390f35b34801561030a57600080fd5b5061032560048036038101906103209190612d73565b610be8565b005b34801561033357600080fd5b5061034e60048036038101906103499190612cd9565b610c48565b005b34801561035c57600080fd5b50610365610cb6565b604051610372919061351d565b60405180910390f35b34801561038757600080fd5b506103a2600480360381019061039d9190612d73565b610d3a565b005b3480156103b057600080fd5b506103cb60048036038101906103c69190612fc8565b610d5a565b6040516103d8919061385a565b60405180910390f35b3480156103ed57600080fd5b5061040860048036038101906104039190612e89565b610d7f565b604051610415919061385a565b60405180910390f35b34801561042a57600080fd5b50610433610e0b565b6040516104409190613538565b60405180910390f35b34801561045557600080fd5b50610470600480360381019061046b9190612fc8565b610e99565b60405161047d91906134b6565b60405180910390f35b34801561049257600080fd5b506104ad60048036038101906104a89190612cd9565b610f4b565b6040516104ba919061385a565b60405180910390f35b3480156104cf57600080fd5b506104d8611003565b005b3480156104e657600080fd5b506104ef611017565b6040516104fc91906134b6565b60405180910390f35b34801561051157600080fd5b5061051a611041565b60405161052a9493929190613875565b60405180910390f35b34801561053f57600080fd5b506105486110a7565b6040516105559190613538565b60405180910390f35b34801561056a57600080fd5b5061058560048036038101906105809190612e49565b611139565b005b34801561059357600080fd5b506105ae60048036038101906105a99190612cd9565b61114f565b005b3480156105bc57600080fd5b506105d760048036038101906105d29190612dc6565b6112ff565b005b3480156105e557600080fd5b5061060060048036038101906105fb9190612fc8565b611361565b005b34801561060e57600080fd5b5061062960048036038101906106249190612f7f565b611373565b005b34801561063757600080fd5b50610652600480360381019061064d9190612fc8565b611395565b60405161065f9190613538565b60405180910390f35b34801561067457600080fd5b5061068f600480360381019061068a9190612d33565b6113a7565b60405161069c919061351d565b60405180910390f35b3480156106b157600080fd5b506106cc60048036038101906106c79190612cd9565b61143b565b005b3480156106da57600080fd5b506106f560048036038101906106f09190612ff5565b6114bf565b005b34801561070357600080fd5b5061071e60048036038101906107199190612d06565b6115bf565b005b600061072b8261160b565b9050919050565b60606000805461074190613b2b565b80601f016020809104026020016040519081016040528092919081815260200182805461076d90613b2b565b80156107ba5780601f1061078f576101008083540402835291602001916107ba565b820191906000526020600020905b81548152906001019060200180831161079d57829003601f168201915b5050505050905090565b60006107cf826116ed565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061081582610e99565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087d9061377a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108a5611738565b73ffffffffffffffffffffffffffffffffffffffff1614806108d457506108d3816108ce611738565b6113a7565b5b610913576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090a906136fa565b60405180910390fd5b61091d8383611740565b505050565b61092a6117f9565b80600c8190555050565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16146109a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109999061367a565b60405180910390fd5b6109aa611877565b6109b26118d4565b60006109bc611928565b15610a33576109c9610b64565b610a08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ff9061355a565b60405180910390fd5b600f60000160109054906101000a900467ffffffffffffffff1667ffffffffffffffff169050610aa1565b610a3b610cb6565b610a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a71906135ba565b60405180910390fd5b600f60000160049054906101000a900467ffffffffffffffff1667ffffffffffffffff1690505b610aab6008611979565b6000610ab7600861198f565b9050610ac3338261199d565b610b5781600e8054610ad490613b2b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0090613b2b565b8015610b4d5780601f10610b2257610100808354040283529160200191610b4d565b820191906000526020600020905b815481529060010190602001808311610b3057829003601f168201915b50505050506119bb565b610b6082611a2f565b5050565b600080600f600001600c9054906101000a900463ffffffff1663ffffffff161415610bc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbb9061369a565b60405180910390fd5b600f60000160009054906101000a900463ffffffff1663ffffffff16421015905090565b610bf9610bf3611738565b82611b39565b610c38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2f9061381a565b60405180910390fd5b610c43838383611bce565b505050565b610c506117f9565b600b819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600f60000160009054906101000a900463ffffffff1663ffffffff161415610d16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0d9061379a565b60405180910390fd5b600f60000160009054906101000a900463ffffffff1663ffffffff16421015905090565b610d55838383604051806020016040528060008152506112ff565b505050565b6000610d646117f9565b610d6e6009611e35565b610d7782611e91565b819050919050565b6000610d896117f9565b6000825111610dcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc49061383a565b60405180910390fd5b610dd5611877565b610ddf6008611979565b6000610deb600861198f565b9050610df78482611e9d565b610e0181846119bb565b8091505092915050565b600e8054610e1890613b2b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e4490613b2b565b8015610e915780601f10610e6657610100808354040283529160200191610e91565b820191906000526020600020905b815481529060010190602001808311610e7457829003601f168201915b505050505081565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f399061375a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb3906136ba565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61100b6117f9565b6110156000612077565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600f8060000160009054906101000a900463ffffffff16908060000160049054906101000a900467ffffffffffffffff169080600001600c9054906101000a900463ffffffff16908060000160109054906101000a900467ffffffffffffffff16905084565b6060600180546110b690613b2b565b80601f01602080910402602001604051908101604052809291908181526020018280546110e290613b2b565b801561112f5780601f106111045761010080835404028352916020019161112f565b820191906000526020600020905b81548152906001019060200180831161111257829003601f168201915b5050505050905090565b61114b611144611738565b838361213d565b5050565b6111576117f9565b6000806000905060005b600b805490508110156111ff57600b818154811061118257611181613cc4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156111ec57809250600191506111ff565b80806111f790613b8e565b915050611161565b5080156112fa57600b6001600b8054905061121a9190613a0b565b8154811061122b5761122a613cc4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b838154811061126a57611269613cc4565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b8054806112c4576112c3613c95565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b505050565b61131061130a611738565b83611b39565b61134f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113469061381a565b60405180910390fd5b61135b848484846122aa565b50505050565b6113696117f9565b80600d8190555050565b61137b6117f9565b80600e9080519060200190611391929190612a6e565b5050565b60606113a082612306565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6114436117f9565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156114b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114aa906135da565b60405180910390fd5b6114bc81612077565b50565b6114c76117f9565b60405180608001604052808463ffffffff1681526020018567ffffffffffffffff1681526020018263ffffffff1681526020018367ffffffffffffffff16815250600f60008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550604082015181600001600c6101000a81548163ffffffff021916908363ffffffff16021790555060608201518160000160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555090505050505050565b6115c76117f9565b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806116d657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806116e657506116e582612419565b5b9050919050565b6116f681612483565b611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172c9061375a565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166117b383610e99565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611801611738565b73ffffffffffffffffffffffffffffffffffffffff1661181f611017565b73ffffffffffffffffffffffffffffffffffffffff1614611875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186c9061373a565b60405180910390fd5b565b6000611883600961198f565b9050600c5481106118c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c0906137da565b60405180910390fd5b600961197990505050565b60006118df33610f4b565b9050600d548110611925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191c906137fa565b60405180910390fd5b50565b60008060009050600b8054905081101561197057600b81815481106119505761194f613cc4565b5b9060005260206000200160009054906101000a9050506001915050611976565b50600090505b90565b6001816000016000828254019250508190555050565b600081600001549050919050565b6119b78282604051806020016040528060008152506124ef565b5050565b6119c482612483565b611a03576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fa906136da565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611a2a929190612a6e565b505050565b80341015611a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a69906137ba565b60405180910390fd5b80341115611acd573373ffffffffffffffffffffffffffffffffffffffff166108fc8234611aa09190613a0b565b9081150290604051600060405180830381858888f19350505050158015611acb573d6000803e3d6000fd5b505b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611b35573d6000803e3d6000fd5b5050565b600080611b4583610e99565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611b875750611b8681856113a7565b5b80611bc557508373ffffffffffffffffffffffffffffffffffffffff16611bad846107c4565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611bee82610e99565b73ffffffffffffffffffffffffffffffffffffffff1614611c44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3b906135fa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611cb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cab9061363a565b60405180910390fd5b611cbf83838361254a565b611cca600082611740565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d1a9190613a0b565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d719190613984565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611e3083838361255a565b505050565b60008160000154905060008111611e81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e789061357a565b60405180910390fd5b6001810382600001819055505050565b611e9a8161255f565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f049061371a565b60405180910390fd5b611f1681612483565b15611f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4d9061361a565b60405180910390fd5b611f626000838361254a565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611fb29190613984565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46120736000838361255a565b5050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156121ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a39061365a565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161229d919061351d565b60405180910390a3505050565b6122b5848484611bce565b6122c1848484846125b2565b612300576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f79061359a565b60405180910390fd5b50505050565b6060612311826116ed565b600060066000848152602001908152602001600020805461233190613b2b565b80601f016020809104026020016040519081016040528092919081815260200182805461235d90613b2b565b80156123aa5780601f1061237f576101008083540402835291602001916123aa565b820191906000526020600020905b81548152906001019060200180831161238d57829003601f168201915b5050505050905060006123bb612749565b90506000815114156123d1578192505050612414565b6000825111156124065780826040516020016123ee929190613492565b60405160208183030381529060405292505050612414565b61240f84612760565b925050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6124f98383611e9d565b61250660008484846125b2565b612545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253c9061359a565b60405180910390fd5b505050565b6125558383836127c8565b505050565b505050565b612568816127cd565b600060066000838152602001908152602001600020805461258890613b2b565b9050146125af576006600082815260200190815260200160002060006125ae9190612af4565b5b50565b60006125d38473ffffffffffffffffffffffffffffffffffffffff166128ea565b1561273c578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026125fc611738565b8786866040518563ffffffff1660e01b815260040161261e94939291906134d1565b602060405180830381600087803b15801561263857600080fd5b505af192505050801561266957506040513d601f19601f820116820180604052508101906126669190612f52565b60015b6126ec573d8060008114612699576040519150601f19603f3d011682016040523d82523d6000602084013e61269e565b606091505b506000815114156126e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126db9061359a565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612741565b600190505b949350505050565b606060405180602001604052806000815250905090565b606061276b826116ed565b6000612775612749565b9050600081511161279557604051806020016040528060008152506127c0565b8061279f8461290d565b6040516020016127b0929190613492565b6040516020818303038152906040525b915050919050565b505050565b60006127d882610e99565b90506127e68160008461254a565b6127f1600083611740565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546128419190613a0b565b925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46128e68160008461255a565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000821415612955576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612a69565b600082905060005b6000821461298757808061297090613b8e565b915050600a8261298091906139da565b915061295d565b60008167ffffffffffffffff8111156129a3576129a2613cf3565b5b6040519080825280601f01601f1916602001820160405280156129d55781602001600182028036833780820191505090505b5090505b60008514612a62576001826129ee9190613a0b565b9150600a856129fd9190613bd7565b6030612a099190613984565b60f81b818381518110612a1f57612a1e613cc4565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85612a5b91906139da565b94506129d9565b8093505050505b919050565b828054612a7a90613b2b565b90600052602060002090601f016020900481019282612a9c5760008555612ae3565b82601f10612ab557805160ff1916838001178555612ae3565b82800160010185558215612ae3579182015b82811115612ae2578251825591602001919060010190612ac7565b5b509050612af09190612b34565b5090565b508054612b0090613b2b565b6000825580601f10612b125750612b31565b601f016020900490600052602060002090810190612b309190612b34565b5b50565b5b80821115612b4d576000816000905550600101612b35565b5090565b6000612b64612b5f846138df565b6138ba565b905082815260208101848484011115612b8057612b7f613d27565b5b612b8b848285613ae9565b509392505050565b6000612ba6612ba184613910565b6138ba565b905082815260208101848484011115612bc257612bc1613d27565b5b612bcd848285613ae9565b509392505050565b600081359050612be4816142c1565b92915050565b600081359050612bf9816142d8565b92915050565b600081359050612c0e816142ef565b92915050565b600081359050612c2381614306565b92915050565b600081519050612c3881614306565b92915050565b600082601f830112612c5357612c52613d22565b5b8135612c63848260208601612b51565b91505092915050565b600082601f830112612c8157612c80613d22565b5b8135612c91848260208601612b93565b91505092915050565b600081359050612ca98161431d565b92915050565b600081359050612cbe81614334565b92915050565b600081359050612cd38161434b565b92915050565b600060208284031215612cef57612cee613d31565b5b6000612cfd84828501612bd5565b91505092915050565b600060208284031215612d1c57612d1b613d31565b5b6000612d2a84828501612bea565b91505092915050565b60008060408385031215612d4a57612d49613d31565b5b6000612d5885828601612bd5565b9250506020612d6985828601612bd5565b9150509250929050565b600080600060608486031215612d8c57612d8b613d31565b5b6000612d9a86828701612bd5565b9350506020612dab86828701612bd5565b9250506040612dbc86828701612c9a565b9150509250925092565b60008060008060808587031215612de057612ddf613d31565b5b6000612dee87828801612bd5565b9450506020612dff87828801612bd5565b9350506040612e1087828801612c9a565b925050606085013567ffffffffffffffff811115612e3157612e30613d2c565b5b612e3d87828801612c3e565b91505092959194509250565b60008060408385031215612e6057612e5f613d31565b5b6000612e6e85828601612bd5565b9250506020612e7f85828601612bff565b9150509250929050565b60008060408385031215612ea057612e9f613d31565b5b6000612eae85828601612bd5565b925050602083013567ffffffffffffffff811115612ecf57612ece613d2c565b5b612edb85828601612c6c565b9150509250929050565b60008060408385031215612efc57612efb613d31565b5b6000612f0a85828601612bd5565b9250506020612f1b85828601612c9a565b9150509250929050565b600060208284031215612f3b57612f3a613d31565b5b6000612f4984828501612c14565b91505092915050565b600060208284031215612f6857612f67613d31565b5b6000612f7684828501612c29565b91505092915050565b600060208284031215612f9557612f94613d31565b5b600082013567ffffffffffffffff811115612fb357612fb2613d2c565b5b612fbf84828501612c6c565b91505092915050565b600060208284031215612fde57612fdd613d31565b5b6000612fec84828501612c9a565b91505092915050565b6000806000806080858703121561300f5761300e613d31565b5b600061301d87828801612cc4565b945050602061302e87828801612caf565b935050604061303f87828801612cc4565b925050606061305087828801612caf565b91505092959194509250565b61306581613a3f565b82525050565b61307481613a63565b82525050565b600061308582613941565b61308f8185613957565b935061309f818560208601613af8565b6130a881613d36565b840191505092915050565b60006130be8261394c565b6130c88185613968565b93506130d8818560208601613af8565b6130e181613d36565b840191505092915050565b60006130f78261394c565b6131018185613979565b9350613111818560208601613af8565b80840191505092915050565b600061312a602183613968565b915061313582613d47565b604082019050919050565b600061314d601b83613968565b915061315882613d96565b602082019050919050565b6000613170603283613968565b915061317b82613dbf565b604082019050919050565b6000613193601d83613968565b915061319e82613e0e565b602082019050919050565b60006131b6602683613968565b91506131c182613e37565b604082019050919050565b60006131d9602583613968565b91506131e482613e86565b604082019050919050565b60006131fc601c83613968565b915061320782613ed5565b602082019050919050565b600061321f602483613968565b915061322a82613efe565b604082019050919050565b6000613242601983613968565b915061324d82613f4d565b602082019050919050565b6000613265601e83613968565b915061327082613f76565b602082019050919050565b6000613288601e83613968565b915061329382613f9f565b602082019050919050565b60006132ab602983613968565b91506132b682613fc8565b604082019050919050565b60006132ce602e83613968565b91506132d982614017565b604082019050919050565b60006132f1603e83613968565b91506132fc82614066565b604082019050919050565b6000613314602083613968565b915061331f826140b5565b602082019050919050565b6000613337602083613968565b9150613342826140de565b602082019050919050565b600061335a601883613968565b915061336582614107565b602082019050919050565b600061337d602183613968565b915061338882614130565b604082019050919050565b60006133a0601883613968565b91506133ab8261417f565b602082019050919050565b60006133c3601683613968565b91506133ce826141a8565b602082019050919050565b60006133e6601b83613968565b91506133f1826141d1565b602082019050919050565b6000613409602d83613968565b9150613414826141fa565b604082019050919050565b600061342c602e83613968565b915061343782614249565b604082019050919050565b600061344f601a83613968565b915061345a82614298565b602082019050919050565b61346e81613abb565b82525050565b61347d81613ac5565b82525050565b61348c81613ad5565b82525050565b600061349e82856130ec565b91506134aa82846130ec565b91508190509392505050565b60006020820190506134cb600083018461305c565b92915050565b60006080820190506134e6600083018761305c565b6134f3602083018661305c565b6135006040830185613465565b8181036060830152613512818461307a565b905095945050505050565b6000602082019050613532600083018461306b565b92915050565b6000602082019050818103600083015261355281846130b3565b905092915050565b600060208201905081810360008301526135738161311d565b9050919050565b6000602082019050818103600083015261359381613140565b9050919050565b600060208201905081810360008301526135b381613163565b9050919050565b600060208201905081810360008301526135d381613186565b9050919050565b600060208201905081810360008301526135f3816131a9565b9050919050565b60006020820190508181036000830152613613816131cc565b9050919050565b60006020820190508181036000830152613633816131ef565b9050919050565b6000602082019050818103600083015261365381613212565b9050919050565b6000602082019050818103600083015261367381613235565b9050919050565b6000602082019050818103600083015261369381613258565b9050919050565b600060208201905081810360008301526136b38161327b565b9050919050565b600060208201905081810360008301526136d38161329e565b9050919050565b600060208201905081810360008301526136f3816132c1565b9050919050565b60006020820190508181036000830152613713816132e4565b9050919050565b6000602082019050818103600083015261373381613307565b9050919050565b600060208201905081810360008301526137538161332a565b9050919050565b600060208201905081810360008301526137738161334d565b9050919050565b6000602082019050818103600083015261379381613370565b9050919050565b600060208201905081810360008301526137b381613393565b9050919050565b600060208201905081810360008301526137d3816133b6565b9050919050565b600060208201905081810360008301526137f3816133d9565b9050919050565b60006020820190508181036000830152613813816133fc565b9050919050565b600060208201905081810360008301526138338161341f565b9050919050565b6000602082019050818103600083015261385381613442565b9050919050565b600060208201905061386f6000830184613465565b92915050565b600060808201905061388a6000830187613474565b6138976020830186613483565b6138a46040830185613474565b6138b16060830184613483565b95945050505050565b60006138c46138d5565b90506138d08282613b5d565b919050565b6000604051905090565b600067ffffffffffffffff8211156138fa576138f9613cf3565b5b61390382613d36565b9050602081019050919050565b600067ffffffffffffffff82111561392b5761392a613cf3565b5b61393482613d36565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061398f82613abb565b915061399a83613abb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156139cf576139ce613c08565b5b828201905092915050565b60006139e582613abb565b91506139f083613abb565b925082613a00576139ff613c37565b5b828204905092915050565b6000613a1682613abb565b9150613a2183613abb565b925082821015613a3457613a33613c08565b5b828203905092915050565b6000613a4a82613a9b565b9050919050565b6000613a5c82613a9b565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015613b16578082015181840152602081019050613afb565b83811115613b25576000848401525b50505050565b60006002820490506001821680613b4357607f821691505b60208210811415613b5757613b56613c66565b5b50919050565b613b6682613d36565b810181811067ffffffffffffffff82111715613b8557613b84613cf3565b5b80604052505050565b6000613b9982613abb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613bcc57613bcb613c08565b5b600182019050919050565b6000613be282613abb565b9150613bed83613abb565b925082613bfd57613bfc613c37565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f5768697465206c6973742073616c6520686173206e6f7420626567756e20796560008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b7f436f756e7465723a2064656372656d656e74206f766572666c6f770000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f5075626c69632073616c6520686173206e6f7420626567756e20796574000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f5468652063616c6c657220697320616e6f7468657220636f6e74726163740000600082015250565b7f5075626c69632057686974652053616c652054696d65206973205442442e0000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f5075626c69632053616c652054696d65206973205442442e0000000000000000600082015250565b7f4e65656420746f2073656e64206d6f7265204554482e00000000000000000000600082015250565b7f52656163686564206d6178696d756d2063697263756c6174696f6e0000000000600082015250565b7f546865206e756d626572206f66204e46547320796f752068617665206578636560008201527f65647320746865206c696d697400000000000000000000000000000000000000602082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b7f546865205f746f6b656e55726c206d7573742062652068617665000000000000600082015250565b6142ca81613a3f565b81146142d557600080fd5b50565b6142e181613a51565b81146142ec57600080fd5b50565b6142f881613a63565b811461430357600080fd5b50565b61430f81613a6f565b811461431a57600080fd5b50565b61432681613abb565b811461433157600080fd5b50565b61433d81613ac5565b811461434857600080fd5b50565b61435481613ad5565b811461435f57600080fd5b5056fea2646970667358221220ebe75cdaab13a06b4d5e3ef76104ecbbba1a6eaf25be63a4ca0b86ad6b4502d264736f6c63430008070033";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BASEURL = "baseUrl";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_ISPUBLICSALEON = "isPublicSaleOn";

    public static final String FUNC_ISWHITEPUBLICSALEON = "isWhitePublicSaleOn";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_MINTADMIN = "mintAdmin";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SALECONFIG = "saleConfig";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETBASEURL = "setBaseUrl";

    public static final String FUNC_SETLIMITNUMBER = "setLimitNumber";

    public static final String FUNC_SETTARGETADDRESS = "setTargetAddress";

    public static final String FUNC_SETUSERLIMITNUMBER = "setUserLimitNumber";

    public static final String FUNC_SETUPNONAUCTIONSALEINFO = "setupNonAuctionSaleInfo";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_WHITEADD = "whiteAdd";

    public static final String FUNC_WHITEDEL = "whiteDel";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    @Deprecated
    protected NftToolPass(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NftToolPass(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NftToolPass(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected NftToolPass(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new Address(160, owner)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> baseUrl() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BASEURL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger _tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new Uint256(_tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new Address(160, owner),
                new Address(160, operator)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isPublicSaleOn() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISPUBLICSALEON, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isWhitePublicSaleOn() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISWHITEPUBLICSALEON, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> mint() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> mint(BigInteger weiNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINT,
                Arrays.<Type>asList(),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiNumber);
    }

    public RemoteFunctionCall<TransactionReceipt> mintAdmin(String _recipient, String _tokenUrl) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_MINTADMIN, 
                Arrays.<Type>asList(new Address(160, _recipient),
                new Utf8String(_tokenUrl)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId),
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> saleConfig() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SALECONFIG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint32>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint32>() {}, new TypeReference<Uint64>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new Address(160, operator),
                new Bool(approved)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBaseUrl(String baseUrl_) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBASEURL, 
                Arrays.<Type>asList(new Utf8String(baseUrl_)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setLimitNumber(BigInteger limitNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETLIMITNUMBER, 
                Arrays.<Type>asList(new Uint256(limitNumber)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTargetAddress(String targetAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTARGETADDRESS, 
                Arrays.<Type>asList(new Address(160, targetAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUserLimitNumber(BigInteger limitNumber) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETUSERLIMITNUMBER, 
                Arrays.<Type>asList(new Uint256(limitNumber)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setupNonAuctionSaleInfo(BigInteger publicPriceWei, BigInteger publicSaleStartTime, BigInteger whitePublicPriceWei, BigInteger whitePublicSaleStartTime) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETUPNONAUCTIONSALEINFO, 
                Arrays.<Type>asList(new Uint64(publicPriceWei),
                new Uint32(publicSaleStartTime),
                new Uint64(whitePublicPriceWei),
                new Uint32(whitePublicSaleStartTime)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new Uint256(tokenId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new Address(160, from),
                new Address(160, to),
                new Uint256(tokenId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> whiteAdd(String newWhite) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WHITEADD, 
                Arrays.<Type>asList(new Address(160, newWhite)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> whiteDel(String delWhite) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WHITEDEL, 
                Arrays.<Type>asList(new Address(160, delWhite)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static NftToolPass load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NftToolPass(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NftToolPass load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NftToolPass(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NftToolPass load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NftToolPass(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NftToolPass load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NftToolPass(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NftToolPass> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String targetAddress, String baseUrl_, BigInteger limitNumber, BigInteger userLimitNumber) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, targetAddress),
                new Utf8String(baseUrl_),
                new Uint256(limitNumber),
                new Uint256(userLimitNumber)));
        return deployRemoteCall(NftToolPass.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<NftToolPass> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String targetAddress, String baseUrl_, BigInteger limitNumber, BigInteger userLimitNumber) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, targetAddress),
                new Utf8String(baseUrl_),
                new Uint256(limitNumber),
                new Uint256(userLimitNumber)));
        return deployRemoteCall(NftToolPass.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<NftToolPass> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String targetAddress, String baseUrl_, BigInteger limitNumber, BigInteger userLimitNumber) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, targetAddress),
                new Utf8String(baseUrl_),
                new Uint256(limitNumber),
                new Uint256(userLimitNumber)));
        return deployRemoteCall(NftToolPass.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<NftToolPass> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String targetAddress, String baseUrl_, BigInteger limitNumber, BigInteger userLimitNumber) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, targetAddress),
                new Utf8String(baseUrl_),
                new Uint256(limitNumber),
                new Uint256(userLimitNumber)));
        return deployRemoteCall(NftToolPass.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }
}
